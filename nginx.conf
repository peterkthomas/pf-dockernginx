# run as www-data for isolation/fastcgi if needed later
user  www-data;

# one worker per core
worker_processes auto;

events {
	# ulimit -n will show how many files can be open per core
	# set low for development
	worker_connections 56;
}

http {
	# only defining html and css types, as that's all we use
	types {
		text/html	html;
		text/css	css;
	}

	# Do not display nginx version header for security
	server_tokens	off;

	# Development choice. attach to a high rate limit per URI, 2400 req/min (40req/s)
	limit_req_zone	$request_uri zone=DEFAULTZONE:10m rate=2400r/m;

	# no post data coming to this server, setting low for basic support
	client_body_buffer_size	1k;
	client_max_body_size	1k;

	# client headers buffer
	client_header_buffer_size 1k;
	large_client_header_buffers 2 1k;

	# timeouts in milliseconds between reads. default was 60
	client_body_timeout		12;
	client_header_timeout	12;

	# how long to keep connection open for before expiring.
	keepalive_timeout 15;

	# time for client to accept/receive a response before aborting
	send_timeout 10;

	# don't buffer static files, should increase performance for this app
	sendfile on;

	# optimize size of packets being sent
	tcp_nopush on;

    server {
		# http2 and push would be best if we had more than one local include.
		# Still using it to avoid rate limiting by keeping it over one connection
		listen		[::]:443	ssl	http2;
        listen      443			ssl http2;
        server_name  localhost;

		root	/app;
		index	index.html;

		# Don't allow unneeded HTTP methods
		if ( $request_method !~ ^(GET|HEAD|POST) ) {
			return 405;
		}

		# check for cross site scripting if the browser allows its
		add_header X-XSS-Protection "1: mode=block";
		# Enable HSTS
		add_header Strict-Transport-Security "max-age=31536000" always;

		ssl_certificate		/etc/ssl/self.crt;
		ssl_certificate_key	/etc/ssl/self.key;

		# disable SSL, use TLS 1.2 and 1.3 only for security
		ssl_protocols TLSv1.2 TLSv1.3;

		# disable insecure ciphers
		ssl_prefer_server_ciphers on;
		#ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
		ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

		# enable Diffie-hellman parameters
		ssl_dhparam /etc/ssl/dhparam.pem;

		# Cache handshakes to improve connection times
		ssl_session_cache shared:SSL:40m;
		ssl_session_timeout 4h;
		# Provide a ticket for the browser to validate the session
		ssl_session_tickets on;

		location / {
			# I debated this one a lot. It's a static include that won't really change often
			# Imagining this might be served very heavily, I opted to cache
			add_header	Cache-Control public;
			add_header	Pragma public;
			expires		10m;

			# apply rate limit zone
			limit_req zone=DEFAULTZONE;
			try_files	$uri $uri/ =404;

			# http2 push
			http2_push /css/style.css;

		}

    }
}